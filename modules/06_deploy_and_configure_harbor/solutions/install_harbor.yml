---

- name: Install and configure Harbor
  hosts: localhost
  vars_files:
    - env_vars.yml
    - secret_vars.yml
  tasks:
    - name: Ensure necessary packages are installed
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
        update_cache: true
      loop:
        - gpg
        - curl
        - tar
      become: true

    - name: Ensure target folder exists
      ansible.builtin.file:
        path: "{{ target_folder }}"
        state: directory
        mode: "0755"

    - name: Check if download files already present
      ansible.builtin.stat:
        path: "{{ target_folder }}/harbor-{{ harbor.installer }}-installer-{{ harbor.version }}.tgz"
      register: harbor_installer

    - name: Debug harbor_installer
      ansible.builtin.debug:
        var: harbor_installer

    - name: Download Harbor installer
      ansible.builtin.get_url:
        url: "https://github.com/goharbor/harbor/releases/download/{{ harbor.version }}/harbor-{{ harbor.installer }}-installer-{{ harbor.version }}.tgz"
        dest: "{{ target_folder }}/harbor-{{ harbor.installer }}-installer-{{ harbor.version }}.tgz"
        mode: '0644'
      when: not (harbor_installer.stat.exists | bool)

    - name: Download Harbor signature verifier .asc
      ansible.builtin.get_url:
        url: "https://github.com/goharbor/harbor/releases/download/{{ harbor.version }}/harbor-{{ harbor.installer }}-installer-{{ harbor.version }}.tgz.asc"
        dest: "{{ target_folder }}/harbor-{{ harbor.installer }}-installer-{{ harbor.version }}.tgz.asc"
        mode: '0644'
      when: not (harbor_installer.stat.exists | bool)

    - name: Download public key for Harbor
      ansible.builtin.apt_key:
        keyserver: "hkps://keyserver.ubuntu.com"
        id: "644FF454C0B4115C"
      become: true
      when: not (harbor_installer.stat.exists | bool)

    - name: Extract Harbor installer
      ansible.builtin.shell: |
        cd {{ target_folder }}
        tar xzvf harbor-{{ harbor.installer }}-installer-{{ harbor.version }}.tgz

    - name: Create certificates directory
      ansible.builtin.file:
        path: "{{ target_folder }}/certs"
        state: directory
        mode: "0755"

    - name: Generate CA private key
      ansible.builtin.command:
        cmd: openssl genrsa -out {{ target_folder }}/certs/ca.key 4096
      args:
        creates: "{{ target_folder }}/certs/ca.key"

    - name: Generate CA certificate
      ansible.builtin.command:
        cmd: >
          openssl req -x509 -new -nodes -sha512 -days 3650
          -subj "/C={{ certificate.country }}/ST={{ certificate.state }}/L={{ certificate.locality }}/O={{ certificate.organization }}/OU={{ certificate.ou }}/CN={{ harbor.host }}"
          -key "{{ target_folder }}/certs/ca.key"
          -out "{{ target_folder }}/certs/ca.crt"
      args:
        creates: "{{ target_folder }}/certs/ca.crt"

    - name: Generate server private key
      ansible.builtin.command:
        cmd: openssl genrsa -out {{ target_folder }}/certs/{{ harbor.host }}.key 4096
      args:
        creates: "{{ target_folder }}/certs/{{ harbor.host }}.key"

    - name: Generate server CSR
      ansible.builtin.command:
        cmd: >
          openssl req -sha512 -new
          -subj "/C={{ certificate.country }}/ST={{ certificate.state }}/L={{ certificate.locality }}/O={{ certificate.organization }}/OU={{ certificate.ou }}/CN={{ harbor.host }}"
          -key "{{ target_folder }}/certs/{{ harbor.host }}.key" -out "{{ target_folder }}/certs/{{ harbor.host }}.csr"
      args:
        creates: "{{ target_folder }}/certs/{{ harbor.host }}.csr"

    - name: Create v3.ext file
      ansible.builtin.copy:
        dest: "{{ target_folder }}/certs/v3.ext"
        content: |
          authorityKeyIdentifier=keyid,issuer
          basicConstraints=CA:FALSE
          keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
          extendedKeyUsage = serverAuth
          subjectAltName = @alt_names

          [alt_names]
          DNS.1={{ harbor.host }}
          IP.1={{ harbor.ip }}
        mode: "0644"

    - name: Generate server certificate
      ansible.builtin.command:
        cmd: >
          openssl x509 -req -sha512 -days 3650
          -extfile "{{ target_folder }}/certs/v3.ext"
          -CA "{{ target_folder }}/certs/ca.crt" -CAkey "{{ target_folder }}/certs/ca.key"
          -CAcreateserial
          -in "{{ target_folder }}/certs/{{ harbor.host }}.csr"
          -out "{{ target_folder }}/certs/{{ harbor.host }}.crt"
      args:
        creates: "{{ target_folder }}/certs/{{ harbor.host }}.crt"


    - name: Create the certificate version for Docker of Harbor server
      ansible.builtin.command:
        cmd: >
          openssl x509 -inform PEM -in "{{ target_folder }}/certs/{{ harbor.host }}.crt" -out "{{ target_folder }}/certs/{{ harbor.host }}.cert"
      args:
        creates: "{{ target_folder }}/certs/{{ harbor.host }}.cert"

    - name: Ensure Docker certs directory is emptied
      ansible.builtin.file:
        path: "/etc/docker/certs.d/{{ harbor.host }}"
        state: absent
      failed_when: false
      become: true

    - name: Ensure Docker certs directory exists
      ansible.builtin.file:
        path: "/etc/docker/certs.d/{{ harbor.host }}"
        state: directory
        mode: "0755"
      become: true

    - name: Ensure Docker certs directory is emptied
      ansible.builtin.file:
        path: "/etc/docker/certs.d/{{ harbor.ip }}"
        state: absent
      failed_when: false
      become: true

    - name: Ensure Docker certs directory exists
      ansible.builtin.file:
        path: "/etc/docker/certs.d/{{ harbor.ip }}"
        state: directory
        mode: "0755"
      become: true

    - name: Copy ca.crt to Docker certs directory
      ansible.builtin.copy:
        src: "{{ target_folder }}/certs/ca.crt"
        dest: "/etc/docker/certs.d/{{ harbor.ip }}/ca.crt"
        mode: "0644"
      become: true

    - name: Copy server key and cert to Docker certs directory
      ansible.builtin.copy:
        src: "{{ target_folder }}/certs/{{ item }}"
        dest: "/etc/docker/certs.d/{{ harbor.host }}/{{ item }}"
        mode: "0644"
      loop:
        - "{{ harbor.host }}.key"
        - "{{ harbor.host }}.cert"
      become: true

    # Ideally this image must be checked since it is mounting the whole host filesystem
    # This is potentially dangerous
    - name: Generate internal TLS certificates
      community.docker.docker_container:
        name: gencert
        image: goharbor/prepare:{{ harbor.version }}
        command: gencert -p /{{ target_folder }}/internal_certs
        volumes:
          - "/:/hostfs"
        state: started

    - name: Create Harbor configuration file
      ansible.builtin.blockinfile:
        path: "{{ target_folder }}/harbor/harbor.yml"
        create: true
        block: |
          # Configuration file of Harbor

          # The IP address or hostname to access admin UI and registry service.
          # DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.
          hostname: {{ harbor.host }}

          # http related config
          http:
            # port for http, default is 80. If https enabled, this port will redirect to https port
            port: 80

          # https related config
          https:
            # https port for harbor, default is 443
            port: 443
            # The path of cert and key files for nginx
            certificate: {{ target_folder }}/certs/{{ harbor.host }}.crt
            private_key: {{ target_folder }}/certs/{{ harbor.host }}.key

          internal_tls:
            # set enabled to true means internal tls is enabled
            enabled: true
            # put your cert and key files on dir
            dir: {{ target_folder }}/internal_certs
            # enable strong ssl ciphers (default: false)
            strong_ssl_ciphers: false

          # The initial password of Harbor admin
          # It only works in first time to install harbor
          # Remember Change the admin password from UI after launching Harbor.
          harbor_admin_password: {{ harbor_admin_password }}

          # Harbor DB configuration
          database:
            # The password for the root user of Harbor DB. Change this before any production use.
            password: {{ database_password }}
            # The maximum number of connections in the idle connection pool. If it <=0, no idle connections are retained.
            max_idle_conns: 100
            # The maximum number of open connections to the database. If it <= 0, then there is no limit on the number of open connections.
            # Note: the default number of connections is 1024 for postgres of harbor.
            max_open_conns: 900
            # The maximum amount of time a connection may be reused. Expired connections may be closed lazily before reuse. If it <= 0, connections are not closed due to a connection's age.
            # The value is a duration string. A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms", "-1.5h" or "2h45m". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
            conn_max_lifetime: 5m
            # The maximum amount of time a connection may be idle. Expired connections may be closed lazily before reuse. If it <= 0, connections are not closed due to a connection's idle time.
            # The value is a duration string. A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms", "-1.5h" or "2h45m". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
            conn_max_idle_time: 0

          # The default data volume
          data_volume: /data


          # Trivy configuration
          #
          # Trivy DB contains vulnerability information from NVD, Red Hat, and many other upstream vulnerability databases.
          # It is downloaded by Trivy from the GitHub release page https://github.com/aquasecurity/trivy-db/releases and cached
          # in the local file system. In addition, the database contains the update timestamp so Trivy can detect whether it
          # should download a newer version from the Internet or use the cached one. Currently, the database is updated every
          # 12 hours and published as a new release to GitHub.
          trivy:
            # ignoreUnfixed The flag to display only fixed vulnerabilities
            ignore_unfixed: false
            # skipUpdate The flag to enable or disable Trivy DB downloads from GitHub
            #
            # You might want to enable this flag in test or CI/CD environments to avoid GitHub rate limiting issues.
            # If the flag is enabled you have to download the `trivy-offline.tar.gz` archive manually, extract `trivy.db` and
            # `metadata.json` files and mount them in the `/home/scanner/.cache/trivy/db` path.
            skip_update: false
            #
            # The offline_scan option prevents Trivy from sending API requests to identify dependencies.
            # Scanning JAR files and pom.xml may require Internet access for better detection, but this option tries to avoid it.
            # For example, the offline mode will not try to resolve transitive dependencies in pom.xml when the dependency doesn't
            # exist in the local repositories. It means a number of detected vulnerabilities might be fewer in offline mode.
            # It would work if all the dependencies are in local.
            # This option doesn't affect DB download. You need to specify "skip-update" as well as "offline-scan" in an air-gapped environment.
            offline_scan: false
            #
            # Comma-separated list of what security issues to detect. Possible values are `vuln`, `config` and `secret`. Defaults to `vuln`.
            security_check: vuln, config, secret
            #
            # insecure The flag to skip verifying registry certificate
            insecure: false
            github_token: {{ github_token }}

          jobservice:
            # Maximum number of job workers in job service
            max_job_workers: 10
            # The jobLoggers backend name, only support "STD_OUTPUT", "FILE" and/or "DB"
            job_loggers:
              - STD_OUTPUT
              - FILE
              # - DB
            # The jobLogger sweeper duration (ignored if `jobLogger` is `stdout`)
            logger_sweeper_duration: 1 #days

          notification:
            # Maximum retry count for webhook job
            webhook_job_max_retry: 3
            # HTTP client timeout for webhook job
            webhook_job_http_client_timeout: 3 #seconds

          # Log configurations
          log:
            # options are debug, info, warning, error, fatal
            level: info
            # configs for logs in local storage
            local:
              # Log files are rotated log_rotate_count times before being removed. If count is 0, old versions are removed rather than rotated.
              rotate_count: 50
              # Log files are rotated only if they grow bigger than log_rotate_size bytes. If size is followed by k, the size is assumed to be in kilobytes.
              # If the M is used, the size is in megabytes, and if G is used, the size is in gigabytes. So size 100, size 100k, size 100M and size 100G
              # are all valid.
              rotate_size: 200M
              # The directory on your host that store log
              location: /var/log/harbor

          #This attribute is for migrator to detect the version of the .cfg file, DO NOT MODIFY!
          _version: 2.9.0


          # Uncomment redis if need to customize redis db
          redis:
            # db_index 0 is for core, it's unchangeable
            registry_db_index: 1
            jobservice_db_index: 2
            trivy_db_index: 5
            # it's optional, the db for harbor business misc, by default is 0, uncomment it if you want to change it.
            harbor_db_index: 6
            # it's optional, the db for harbor cache layer, by default is 0, uncomment it if you want to change it.
            cache_layer_db_index: 7

          # Global proxy
          # Config http proxy for components, e.g. http://my.proxy.com:3128
          # Components doesn't need to connect to each others via http proxy.
          # Remove component from `components` array if want disable proxy
          # for it. If you want use proxy for replication, MUST enable proxy
          # for core and jobservice, and set `http_proxy` and `https_proxy`.
          # Add domain to the `no_proxy` field, when you want disable proxy
          # for some special registry.
          proxy:
            http_proxy:
            https_proxy:
            no_proxy:
            components:
              - core
              - jobservice
              - trivy


          # Enable purge _upload directories
          upload_purging:
            enabled: true
            # remove files in _upload directories which exist for a period of time, default is one week.
            age: 168h
            # the interval of the purge operations
            interval: 24h
            dryrun: false

          # Cache layer configurations
          # If this feature enabled, harbor will cache the resource
          # `project/project_metadata/repository/artifact/manifest` in the redis
          # which can especially help to improve the performance of high concurrent
          # manifest pulling.
          # NOTICE
          # If you are deploying Harbor in HA mode, make sure that all the harbor
          # instances have the same behaviour, all with caching enabled or disabled,
          # otherwise it can lead to potential data inconsistency.
          cache:
            # not enabled by default
            enabled: true
            # keep cache for one day by default
            expire_hours: 24
        mode: "0644"

    - name: Chown the directory to ansible user
      ansible.builtin.file:
        path: "{{ target_folder }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        recurse: true
      become: true

    - name: Ensure certificates are generated
      ansible.builtin.command: sleep 20

    - name: Restart docker
      ansible.builtin.service:
        name: docker
        state: restarted
      become: true

    - name: Install harbor
      ansible.builtin.command:
        cmd: >
          {{ target_folder }}/harbor/install.sh --with-trivy
      args:
        chdir: "{{ target_folder }}/harbor"
      become: true